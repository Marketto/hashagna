/**
 * @marketto/hashagna 1.0.0
 * Copyright (c) 2020, Marco Ricupero <marco.ricupero@gmail.com>
 * License: MIT
 */

var Hashagna = (function (exports) {
    'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    class HashagnaSerializator {
        static deserializeParams(serializedParams) {
            return (serializedParams || '')
                .replace(/^(?:#|\?)/, '').split('&')
                .reduce((accumulator, keyValue) => {
                const [key, value] = keyValue.split('=');
                return Object.assign(Object.assign({}, accumulator), { [key.trim()]: this.deserializeValue(value) });
            }, {});
        }
        static deserializeValue(serializedValue) {
            const trimmedSerializedValue = (serializedValue || '').trim();
            if (trimmedSerializedValue === '') {
                return null;
            }
            if ((/^(?:true|false)$/i).test(trimmedSerializedValue)) {
                return (/^true$/i).test(trimmedSerializedValue);
            }
            if (trimmedSerializedValue === (parseFloat(trimmedSerializedValue)).toString()) {
                return parseFloat(trimmedSerializedValue);
            }
            return trimmedSerializedValue;
        }
        static serializeParams(deserializedParams) {
            return Object.entries(deserializedParams || {})
                .map(([key, value]) => `${key}=${this.serializeValue(value)}`)
                .join('&');
        }
        static serializeValue(deserializedValue) {
            if (deserializedValue === null || typeof deserializedValue === 'undefined') {
                return '';
            }
            if (['boolean', 'number', 'string'].includes(typeof deserializedValue)) {
                return (deserializedValue).toString();
            }
            return '';
        }
    }

    class HashagnaUtils {
        static newIframe() {
            return __awaiter(this, void 0, void 0, function* () {
                const id = this.newId();
                const iframe = document.createElement('iframe');
                iframe.setAttribute('style', 'display: none');
                iframe.setAttribute('id', id);
                window.document.body.appendChild(iframe);
                return yield this.isDomElementReady(() => document.getElementById(id));
            });
        }
        static isDomElementReady(getter) {
            return __awaiter(this, void 0, void 0, function* () {
                const target = getter();
                if (!target) {
                    return yield new Promise(resolve => window.requestAnimationFrame(() => this.isDomElementReady(getter).then(resolve)));
                }
                return target;
            });
        }
        static iframeListenerInjector(iFrame) {
            return new Promise((resolve, reject) => {
                iFrame.onload = () => __awaiter(this, void 0, void 0, function* () {
                    const contentWindow = yield this.isDomElementReady(() => iFrame.contentWindow);
                    if (!contentWindow || !contentWindow.location || !contentWindow.location.hash) {
                        return reject(new Error('No hash params found'));
                    }
                    const { hash, host, hostname, href, origin, pathname, port, protocol, search } = contentWindow.location;
                    return resolve({
                        hash,
                        hashParams: HashagnaSerializator.deserializeParams(hash),
                        host,
                        hostname,
                        href,
                        origin,
                        pathname,
                        protocol,
                        search,
                        port,
                        query: HashagnaSerializator.deserializeParams(search),
                    });
                });
            });
        }
        static newId() {
            return Math.random().toString(36).substring(2);
        }
        static iFrameFormSubmit(iFrame, url, params) {
            return __awaiter(this, void 0, void 0, function* () {
                // Retrieving iframe document
                const iFrameDoc = yield this.isDomElementReady(() => iFrame.contentDocument);
                const iFrameDocElement = yield this.isDomElementReady(() => iFrameDoc.documentElement);
                // Cleaning up the iFrame document
                iFrameDocElement.innerHTML = '';
                // Creating form
                const consentForm = iFrameDoc.createElement('form');
                // Form id
                const id = this.newId();
                Object.entries({
                    method: 'post',
                    action: url,
                    id,
                }).forEach(([key, value]) => consentForm.setAttribute(key, value));
                // Adding form input fields
                Object.entries(params).forEach(([name, value]) => {
                    // Creating new input element
                    const input = iFrameDoc.createElement('input');
                    input.setAttribute('name', name);
                    input.setAttribute('value', HashagnaSerializator.serializeValue(value));
                    // Appending the input into the form
                    consentForm.appendChild(input);
                });
                // Appending composed form into the iFrame
                iFrameDocElement.appendChild(consentForm);
                // Waiting for DOM to be ready
                yield this.isDomElementReady(() => iFrameDoc.getElementById(id));
                // Sending request by form submit
                consentForm.submit();
            });
        }
    }

    class HashagnaHttpClient {
        static initIFrame(options = {}) {
            return __awaiter(this, void 0, void 0, function* () {
                let iFrame;
                if (options.iFrame instanceof HTMLIFrameElement) {
                    iFrame = options.iFrame;
                }
                else if (options.iFrameId) {
                    iFrame = yield HashagnaUtils.isDomElementReady(() => document.getElementById(options.iFrameId));
                }
                else {
                    iFrame = yield HashagnaUtils.newIframe();
                }
                let finalCallback;
                if (!(options.iFrame || options.iFrameId)) {
                    finalCallback = () => iFrame.remove();
                }
                else if (options.autoClean) {
                    finalCallback = () => HashagnaUtils.isDomElementReady(() => iFrame.contentWindow &&
                        iFrame.contentWindow.document.getElementsByTagName('body')[0])
                        .then(iFrameBody => iFrameBody.innerHTML = '');
                }
                else {
                    finalCallback = () => undefined;
                }
                const listener = HashagnaUtils.iframeListenerInjector(iFrame).finally(finalCallback);
                return {
                    iFrame,
                    listener
                };
            });
        }
        static get(url, queryParams, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const { iFrame, listener } = yield this.initIFrame(options);
                iFrame.src = `${url}?${HashagnaSerializator.serializeParams(queryParams)}`;
                return yield listener;
            });
        }
        static post(url, params, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const { iFrame, listener } = yield this.initIFrame(options);
                yield HashagnaUtils.iFrameFormSubmit(iFrame, url, params);
                return yield listener;
            });
        }
    }

    exports.HashagnaHttpClient = HashagnaHttpClient;
    exports.HashagnaUtils = HashagnaUtils;

    return exports;

}({}));
//# sourceMappingURL=hashagna.min.js.map
